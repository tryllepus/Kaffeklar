@page "/"
@inject HttpClient Http
@inject ISnackbar Snackbar

<div class="date-timer-section">
    <MudTimePicker 
        PickerVariant="PickerVariant.Static" 
        Color="Color.Dark"
        Rounded="true"
        ToolbarClass="timer-picker-toolbar"
        MinuteSelectionStep="5"
        @bind-time="@currentTime" Class="time-picker">
    </MudTimePicker>
    <div class="picker-actions">
        <MudButton 
            Style="background-color: #8D6E63; color: white;"
            OnClick="@StartCoffeeMachine">
            Sæt timer
        </MudButton>
        <MudButton Style="background-color: #8D6E63; color: white;"
                   OnClick="@StopCoffeeMachine">
            Stop kaffemaskine
        </MudButton>
        <MudButton Style="background-color: #8D6E63; color: white;"
                   OnClick="@GetCoffeeMachineStatus">
            Tjek status
        </MudButton>
    </div>
</div>

@code{
    public TimeSpan? currentTime;

    protected override void OnInitialized()
    {
        char[] separators = new char[] { ':', '.' };
        var tempTime = DateTime.Now.ToLocalTime().ToString("HH:mm").Split(separators);

        currentTime = new TimeSpan(Int32.Parse(tempTime[0]), Int32.Parse(tempTime[1]), 00);
        Log.Information($"Time: {currentTime}");
    }

    private async Task StartCoffeeMachine()
    {
        var coffeeRequest = new CoffeeRequest { Time = currentTime };
        HttpResponseMessage response = null;

        // Konverter objektet til JSON-indhold
        var jsonContent = new StringContent(
            System.Text.Json.JsonSerializer.Serialize(coffeeRequest),
            System.Text.Encoding.UTF8,
            "application/json"
        );

        try
        {
            // Forsøger at sende POST-anmodningen
            response = await Http.PostAsync("api/raspberrypi/startcoffee", jsonContent);

            // Tjek om anmodningen lykkedes, før der vises en succesbesked
            if (response != null && response.IsSuccessStatusCode)
            {
                Snackbar.Add($"Kaffemaskinen starter kl. {currentTime}", Severity.Success);
            }
            else
            {
                Snackbar.Add("Fejl ved start af kaffemaskinen", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            // Hvis der opstår en undtagelse, vis en fejlbesked
            Snackbar.Add("Kunne ikke oprette forbindelse til serveren", Severity.Error);
            Log.Warning(ex.ToString());
        }
    }


    private async Task StopCoffeeMachine()
    {
        HttpResponseMessage response = null;

        try
        {
            response = await Http.PostAsync("api/raspberrypi/stopcoffee", null);

            // Tjek om anmodningen lykkedes, før der vises en succesbesked
            if (response != null && response.IsSuccessStatusCode)
            {
                Snackbar.Add("Kaffemaskinen blev stoppet", Severity.Success);
            }
            else
            {
                Snackbar.Add("Fejl ved stop af kaffemaskinen", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Kunne ikke oprette forbindelse til serveren", Severity.Error);
            Log.Warning(ex.ToString());
        }

    }

    private async Task GetCoffeeMachineStatus()
    {
        HttpResponseMessage response = null;

        try
        {
            response = await Http.GetAsync("api/raspberrypi/status");

            if (response != null && response.IsSuccessStatusCode)
            {
                // Læs indholdet af responsen korrekt
                var content = await response.Content.ReadAsStringAsync();
                var statusObj = JsonSerializer.Deserialize<CoffeeMachineStatus>(content);

                if (statusObj != null && statusObj.Status == "OFF")
                {
                    Snackbar.Add("Kaffemaskinen er slukket", Severity.Info);
                }
                else if (statusObj != null && statusObj.Status == "ON")
                {
                    Snackbar.Add("Kaffemaskinen er tændt", Severity.Info);
                }
            }
            else
            {
                Snackbar.Add("Fejl ved læsning af status", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Kunne ikke oprette forbindelse til serveren", Severity.Error);
            Log.Warning(ex.ToString());
        }
    }
}